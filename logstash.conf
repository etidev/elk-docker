input {
  stdin {
    type => "stdin-type"
  }

  file {
    type => "syslog"
    path => [ "/var/log/*.log", "/var/log/messages", "/var/log/syslog" ]
  }

  file {
    type => "logstash"
    path => [ "/var/log/logstash/logstash.log" ]
    start_position => "beginning"
  }
  
  udp {
      port => 5960
      codec => plain {
         charset => "UTF-8"
      }
      type => log4net
   }
}

filter {
  if [type] == "docker" {
    json {
      source => "message"
    }
    mutate {
      rename => [ "log", "message" ]
    }
    date {
      match => [ "time", "ISO8601" ]
    }
  }
  if [type] == "log4net" {
      grok {
         remove_field => message
         match => { message => "%{TIMESTAMP_ISO8601:sourceTimestamp} %{LOGLEVEL:loglevel} +- %{DATA:tempSite} - %{IPORHOST:tempHost} - %{DATA:tempApp} - %{DATA:tempUser} - %{DATA:tempDevice} - %{DATA:tempAgency} - %{DATA:tempUnit} - %{DATA:tempLAT} - %{GREEDYDATA:tempMessage}" }
      }
      if !("_grokparsefailure" in [tags]) {
         mutate {
            replace => [ "message" , "%{tempMessage}" ]
            replace => [ "host" , "%{tempHost}" ]
            add_field => { "Site" => "%{tempSite}" }
            add_field => { "Application" => "%{tempApp}" }
            add_field => { "User" => "%{tempUser}" }
            add_field => { "Device" => "%{tempDevice}" }
            add_field => { "Agency" => "%{tempAgency}" }
            add_field => { "Unit" => "%{tempUnit}" }
            add_field => { "LogAction" => "%{tempLAT}" }
         }
      }
      mutate {
         remove_field => [ "tempMessage" ]
         remove_field => [ "tempHost" ]
      }
   }
}

output {
  stdout {
    codec => rubydebug
  }

  elasticsearch {
    host => localhost
  }
  
  lumberjack {
    host => [ "52.84.246.120" ]
    port => 5000
    ssl_certificate => "/etc/pki/tls/certs/logstash-CentralELK.crt"
  }
}